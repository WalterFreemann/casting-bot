import re
import os
import requests
import aiohttp
import asyncio
from threading import Thread
from flask import Flask
from telethon import TelegramClient, events

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = Flask(__name__)

@app.route("/")
def index():
    return "–ö–∞—Å—Ç–∏–Ω–≥-–±–æ—Ç –∂–∏–≤. –ë–¥–∏—Ç –∫–∞—Å—Ç–∏–Ω–≥–∏. –ù–µ –º–µ—à–∞–π."

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
api_id = int(os.getenv('API_ID'))
api_hash = os.getenv('API_HASH')
phone = os.getenv('PHONE')
bot_token = os.getenv('BOT_TOKEN')
chat_id = int(os.getenv('CHAT_ID'))

b2_key_id = os.getenv('B2_KEY_ID')
b2_app_key = os.getenv('B2_APPLICATION_KEY')
bucket_name = os.getenv('BUCKET_NAME')
session_file_name = os.getenv('SESSION_FILE_NAME', 'session.session')

channels = os.getenv('CHANNELS', '')
channels_list = [ch.strip() for ch in channels.split(',') if ch.strip()]
session_local_path = session_file_name

# === –ó–∞–≥—Ä—É–∑–∫–∞ .session –∏–∑ B2 (–µ—Å–ª–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ) ===
def download_session_from_b2():
    print("–°–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ. –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –∏–∑ B2...")
    auth = requests.get(
        "https://api.backblazeb2.com/b2api/v2/b2_authorize_account",
        auth=(b2_key_id, b2_app_key)
    )
    if auth.status_code != 200:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ B2: {auth.status_code} - {auth.text}")

    auth_data = auth.json()
    download_url = auth_data['downloadUrl']
    auth_token = auth_data['authorizationToken']

    file_url = f"{download_url}/file/{bucket_name}/{session_file_name}"
    headers = {"Authorization": auth_token}
    response = requests.get(file_url, headers=headers)

    if response.status_code == 200:
        with open(session_local_path, 'wb') as f:
            f.write(response.content)
        print("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    else:
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ B2: {response.status_code} - {response.text}")

if not os.path.exists(session_local_path):
    download_session_from_b2()
else:
    print("–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë.")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞ ===
client = TelegramClient(session_local_path, api_id, api_hash)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ===
def is_relevant_message(text):
    text = text.lower()

    # –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    age_match = re.search(r'(?:–≤–æ–∑—Ä–∞—Å—Ç[\s:‚Äì\-]*)?(?:–æ—Ç)?\s*(\d{2})[\s\-‚Äì~]{0,3}(?:–¥–æ)?\s*(\d{2})?\s*–ª–µ—Ç', text)
    if age_match:
        age_start = int(age_match.group(1))
        age_end = int(age_match.group(2)) if age_match.group(2) else age_start
        if age_end < 30 or age_start > 50:
            return False
    else:
        return False

    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É
    if '–∂–µ–Ω—â–∏–Ω' in text or '–¥–µ–≤—É—à–∫' in text:
        return False

    # –ù–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏
    role_keywords = ['—Ä–æ–ª—å', '–∏–≥—Ä–∞–µ—Ç', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '–≥–µ—Ä–æ–π', '—Ç–∏–ø–∞–∂']
    if not any(kw in text for kw in role_keywords):
        return False

    return True

# === –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ===
async def forward_message(event):
    try:
        await client.forward_messages(chat_id, event.message)
        print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {event.chat.title if event.chat else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞'}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@client.on(events.NewMessage(chats=channels_list))
async def handler(event):
    msg_text = event.message.message or ''
    if is_relevant_message(msg_text):
        await forward_message(event)
    else:
        print(f"[–ü—Ä–æ–ø—É—â–µ–Ω–æ] {event.chat.title if event.chat else '–ë–µ–∑ –∏–º–µ–Ω–∏'}")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ—Å—Å–∏–∏ ===
async def check_user_subscriptions():
    print("\nüîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ—Å—Å–∏–∏...")
    dialogs = await client.get_dialogs()
    channels_user_is_in = []
    for dialog in dialogs:
        if dialog.is_channel:
            username = getattr(dialog.entity, 'username', None)
            if username:
                channels_user_is_in.append(username)
    print(f"–ö–∞–Ω–∞–ª—ã –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {channels_user_is_in}\n")

    print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–≤–æ–∏–º —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤:")
    for ch in channels_list:
        if ch in channels_user_is_in:
            print(f"‚úÖ {ch} ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å")
        else:
            print(f"‚ùå {ch} ‚Äî –ø–æ–¥–ø–∏—Å–∫–∏ –ù–ï–¢")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª–∞–º ===
async def check_channels():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª–∞–º (get_entity)...")
    for ch in channels_list:
        try:
            entity = await client.get_entity(ch)
            title = getattr(entity, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫: {ch} ‚Äî {title}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {ch}: {e}")

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ===
def run_flask():
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

# === –û—Å–Ω–æ–≤–Ω–∞—è async —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ===
async def main():
    await client.start(phone=phone)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await check_user_subscriptions()
    await check_channels()
    await client.run_until_disconnected()

if __name__ == '__main__':
    flask_thread = Thread(target=run_flask)
    flask_thread.start()
    asyncio.run(main())
