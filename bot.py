import os
import re
import requests
import asyncio
from threading import Thread
from flask import Flask
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∂–∏–≤—É—á–µ—Å—Ç–∏ –Ω–∞ Render –∏–ª–∏ –¥—Ä—É–≥–∏—Ö PaaS ===
app = Flask(__name__)

@app.route("/")
def index():
    return "–ö–∞—Å—Ç–∏–Ω–≥-–±–æ—Ç –∂–∏–≤. –ë–¥–∏—Ç –∫–∞—Å—Ç–∏–Ω–≥–∏. –ù–µ –º–µ—à–∞–π."

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ ===
def get_env_var(key, required=True, cast=str, default=None):
    value = os.getenv(key)
    if value is None:
        if required:
            raise RuntimeError(f"‚õî –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è '{key}' –Ω–µ –∑–∞–¥–∞–Ω–∞")
        return default
    try:
        return cast(value)
    except Exception as e:
        raise RuntimeError(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ '{key}': {e}")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
api_id = get_env_var('API_ID', cast=int)
api_hash = get_env_var('API_HASH')
phone = get_env_var('PHONE')
bot_token = get_env_var('BOT_TOKEN')
chat_id = get_env_var('CHAT_ID')

b2_key_id = get_env_var('B2_KEY_ID')
b2_app_key = get_env_var('B2_APPLICATION_KEY')
bucket_name = get_env_var('BUCKET_NAME')
session_file_name = get_env_var('SESSION_FILE_NAME', required=False, default='session.session')

channels_raw = get_env_var('CHANNELS', required=False, default='')
channels_list = [c.strip() for c in channels_raw.split(',') if c.strip()]

session_local_path = session_file_name

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ B2, –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ –µ–≥–æ –Ω–µ—Ç ===
def download_session_from_b2():
    print("–°–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑ Backblaze B2...")

    auth = requests.get(
        "https://api.backblazeb2.com/b2api/v2/b2_authorize_account",
        auth=(b2_key_id, b2_app_key)
    )

    if auth.status_code != 200:
        raise RuntimeError(f"B2 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: {auth.status_code} ‚Äî {auth.text}")

    data = auth.json()
    file_url = f"{data['downloadUrl']}/file/{bucket_name}/{session_file_name}"
    headers = {"Authorization": data['authorizationToken']}

    response = requests.get(file_url, headers=headers)
    if response.status_code == 200:
        with open(session_local_path, 'wb') as f:
            f.write(response.content)
        print("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
    else:
        raise RuntimeError(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å .session –∏–∑ B2: {response.status_code} ‚Äî {response.text}")

if not os.path.exists(session_local_path):
    download_session_from_b2()
else:
    print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è .session –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë.")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ===
client = TelegramClient(session_local_path, api_id, api_hash)

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É, –ø–æ–ª—É –∏ —Ä–æ–ª—è–º ===
def is_relevant_message(text):
    text_lower = text.lower()
    age_patterns = [
        r'\b(?:3[0-9]|4[0-9]|50)[\s\-‚Äì~]{0,3}–ª–µ—Ç\b',
        r'\b–≤–æ–∑—Ä–∞—Å—Ç\s*[‚Äî\-]?\s*(?:3[0-9]|4[0-9]|50)'
    ]
    male_keywords = ['–º—É–∂—á–∏–Ω–∞', '–ø–∞—Ä–µ–Ω—å', '–º—É–∂—Å–∫–∞—è —Ä–æ–ª—å', '—Ç–∏–ø–∞–∂ –º—É–∂—á–∏–Ω—ã', '–≥–µ—Ä–æ–π-–º—É–∂—á–∏–Ω–∞']
    role_keywords = ['—Ä–æ–ª—å', '–∏–≥—Ä–∞–µ—Ç', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '–≥–µ—Ä–æ–π']

    has_age = any(re.search(p, text_lower) for p in age_patterns)
    has_male = any(k in text_lower for k in male_keywords)
    has_role = any(k in text_lower for k in role_keywords)

    return has_age and (has_male or has_role)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram (–±–æ—Ç—É) ===
async def send_telegram_message(text):
    try:
        await client.send_message(chat_id, text)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@client.on(events.NewMessage(chats=channels_list))
async def handle_message(event):
    text = event.message.message
    if is_relevant_message(text):
        title = event.chat.title if event.chat else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        snippet = text[:500] + ('...' if len(text) > 500 else '')
        output = f"üì¢ –ö–∞—Å—Ç–∏–Ω–≥ –Ω–∞–π–¥–µ–Ω: {title}\n{snippet}"
        print(output)
        await send_telegram_message(output)
    else:
        print(f"[–ü—Ä–æ–ø—É—Å–∫] {event.chat.title if event.chat else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª—ã ===
async def check_user_subscriptions():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    dialogs = await client.get_dialogs()
    subscribed = [getattr(d.entity, 'username', None) for d in dialogs if d.is_channel]

    for ch in channels_list:
        if ch in subscribed:
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å: {ch}")
        else:
            print(f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∏ –ù–ï–¢: {ch}")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª–∞–º ===
async def check_channels():
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ get_entity() –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤...")
    for ch in channels_list:
        try:
            entity = await client.get_entity(ch)
            title = getattr(entity, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {ch} ‚Äî {title}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {ch}: {e}")

# === –ó–∞–ø—É—Å–∫ Flask –≤ —Ñ–æ–Ω–µ ===
def run_flask():
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ===
async def main():
    try:
        await client.start(phone=phone)
    except SessionPasswordNeededError:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å. –î–æ–±–∞–≤—å –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.")
        return

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã...")
    await check_user_subscriptions()
    await check_channels()
    await client.run_until_disconnected()

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    Thread(target=run_flask).start()
    asyncio.run(main())
