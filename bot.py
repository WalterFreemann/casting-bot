import re
import os
import requests
import aiohttp
import asyncio
from threading import Thread
from flask import Flask
from telethon import TelegramClient, events

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = Flask(__name__)

@app.route("/")
def index():
    return "–ö–∞—Å—Ç–∏–Ω–≥-–±–æ—Ç –∂–∏–≤. –ë–¥–∏—Ç –∫–∞—Å—Ç–∏–Ω–≥–∏. –ù–µ –º–µ—à–∞–π."

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
api_id = int(os.getenv('API_ID'))
api_hash = os.getenv('API_HASH')
phone = os.getenv('PHONE')
bot_token = os.getenv('BOT_TOKEN')
chat_id = int(os.getenv('CHAT_ID'))

b2_key_id = os.getenv('B2_KEY_ID')
b2_app_key = os.getenv('B2_APPLICATION_KEY')
bucket_name = os.getenv('BUCKET_NAME')
session_file_name = os.getenv('SESSION_FILE_NAME', 'session.session')

channels = os.getenv('CHANNELS', '')
channels_list = [ch.strip() for ch in channels.split(',') if ch.strip()]
session_local_path = session_file_name

required_vars = {
    "API_ID": api_id,
    "API_HASH": api_hash,
    "PHONE": phone,
    "BOT_TOKEN": bot_token,
    "CHAT_ID": chat_id,
    "B2_KEY_ID": b2_key_id,
    "B2_APPLICATION_KEY": b2_app_key,
    "BUCKET_NAME": bucket_name
}

for var_name, var_value in required_vars.items():
    if not var_value:
        raise RuntimeError(f"–û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è '{var_name}' –Ω–µ –∑–∞–¥–∞–Ω–∞!")

# === –ó–∞–≥—Ä—É–∑–∫–∞ .session –∏–∑ B2 (–µ—Å–ª–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ) ===
def download_session_from_b2():
    print("–°–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ. –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –∏–∑ B2...")
    auth = requests.get(
        "https://api.backblazeb2.com/b2api/v2/b2_authorize_account",
        auth=(b2_key_id, b2_app_key)
    )
    if auth.status_code != 200:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ B2: {auth.status_code} - {auth.text}")

    auth_data = auth.json()
    download_url = auth_data['downloadUrl']
    auth_token = auth_data['authorizationToken']

    file_url = f"{download_url}/file/{bucket_name}/{session_file_name}"
    headers = {"Authorization": auth_token}
    response = requests.get(file_url, headers=headers)

    if response.status_code == 200:
        with open(session_local_path, 'wb') as f:
            f.write(response.content)
        print("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    else:
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ B2: {response.status_code} - {response.text}")

if not os.path.exists(session_local_path):
    download_session_from_b2()
else:
    print("–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë.")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞ ===
client = TelegramClient(session_local_path, api_id, api_hash)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ ===
def is_relevant_message(text):
    import re
    text = text.lower()

    # === –≠—Ç–∞–ø 0. –Ø–≤–Ω—ã–µ –º—É—Å–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã (blacklist) ===
    blacklist_phrases = [
        '–≤ —Ä–∞–º–∫–∞—Ö –º–∞—Ä–∞—Ñ–æ–Ω–∞', '–ø—Ä—è–º–æ–π —ç—Ñ–∏—Ä', '–≤–µ–±–∏–Ω–∞—Ä', '–∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫—É—Ä—Å',
        '—Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è', '–≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è –≤ —á–∞—Ç–µ', '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ', '–∑–∞–Ω—è—Ç–∏–µ –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞',
        '–ª–µ–∫—Ü–∏—è', '–æ–±—É—á–µ–Ω–∏–µ', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è', '—Ä–∞–∑–±–æ—Ä—ã –ø—Ä–æ–±',
        '–∫–∞—Å—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ–¥–µ–ª–∏—Ç—Å—è –æ–ø—ã—Ç–æ–º', '–¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–∏—à–∏—Ç–µ', '–∑–∞–Ω—è—Ç–∏–µ –ø–æ –∫–æ–º–µ–¥–∏–∏',
        '–≤–∏–¥–µ–æ–≤–∏–∑–∏—Ç–∫–∞ —Å —Ä–µ–∂–∏—Å—Å–µ—Ä–æ–º', '—Ñ–æ—Ç–æ–¥–µ–Ω—å', '–ø–∞–∫–µ—Ç —É—Å–ª—É–≥', '—Ç–∞—Ä–∏—Ñ',
        '–≤–∏–∑–∞–∂–∏—Å—Ç', '–≤ —Å—Ç—É–¥–∏–∏', '–±—Ä–∏—Ñ–∏–Ω–≥', '–≤–æ—Ä–∫—à–æ–ø', '–ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏',
        '–æ–±–∑–æ—Ä –ø—Ä–æ–±', '–æ—Ç–∑—ã–≤—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
    ]
    for phrase in blacklist_phrases:
        if phrase in text:
            return False

    # === –≠—Ç–∞–ø 1. –Ø–≤–Ω–æ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ ‚Äî –Ω–µ –∫–∞—Å—Ç–∏–Ω–≥ ===
    non_casting_keywords = [
        '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '—Ñ—É—Ä—à–µ—Ç', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–∑—Ä–∏—Ç–µ–ª–∏', '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã', '–≥–æ—Å—Ç–∏',
        '–≤ –∫–ª—É–±–µ', '–ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ', '–æ—Ñ–∏—Å–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', '–¥–ª—è –º–∞—Å—Å–æ–≤–∫–∏', '–ø—É–±–ª–∏–∫–∞',
        '–¥–∏–¥–∂–µ–π', '–≤–µ–¥—É—â–∏–π', '–∞–Ω–∏–º–∞—Ç–æ—Ä', '–º–æ–¥–µ–ª—å', '–º–æ–¥–µ–ª–∏', '—Å—Ç–∞—Ç–∏—Å—Ç—ã', '–Ω–∞–±–æ—Ä –≤ —Å—Ç—É–¥–∏—é'
    ]
    if any(word in text for word in non_casting_keywords):
        return False

    # === –≠—Ç–∞–ø 2. –ñ–µ–Ω—Å–∫–∏–µ –∫–∞—Å—Ç–∏–Ω–≥–∏ ===
    if ('–∂–µ–Ω—â–∏–Ω' in text or '–¥–µ–≤—É—à–∫' in text or '–∞–∫—Ç—Ä–∏—Å' in text) and not any(m in text for m in ['–º—É–∂—á–∏–Ω', '–º—É–∂—Å–∫', '–º—É–∂—á–∏–Ω–∞', '–∞–∫—Ç—ë—Ä', '–∞–∫—Ç–µ—Ä']):
        return False

    # === –≠—Ç–∞–ø 3. –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –≥–æ–Ω–æ—Ä–∞—Ä –∑–∞ –º–∞—Å—Å–æ–≤–∫—É/—ç–ø–∏–∑–æ–¥ –±–µ–∑ —Å–ª–æ–≤ ===
    low_paid_roles = ['–º–∞—Å—Å–æ–≤–∫', '–≥—Ä—É–ø–ø–æ–≤', '—ç–ø–∏–∑–æ–¥ –±–µ–∑ —Å–ª–æ–≤', '–≤—Ä–∞—á–∏', '—Å–∞–Ω–∏—Ç–∞—Ä—ã', '–ø—Ä–æ—Ö–æ–¥—è—â', '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç', '–ø—Ä–æ—Ö–æ–∂']
    pay_match = re.search(r'(\d{3,6})\s*(‚ÇΩ|—Ä—É–±|—Ä—É–±\.|—Ä\b)', text)
    if pay_match:
        amount = int(pay_match.group(1))
        if amount < 5000 and any(word in text for word in low_paid_roles):
            return False

    # === –≠—Ç–∞–ø 4. –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä (–ø—Ä–∏–º–µ—Ä–Ω–æ 25‚Äì55 –ª–µ—Ç) ===
    age_match = re.findall(r'(\d{2})\s*[-‚Äì~]?\s*(\d{2})?\s*–ª–µ—Ç', text)
    for match in age_match:
        start = int(match[0])
        end = int(match[1]) if match[1] else start
        if end < 25 or start > 55:
            return False

    # === –≠—Ç–∞–ø 5. –ñ—ë—Å—Ç–∫–∞—è —ç—Ç–Ω–∏–∫–∞ (–∏—Å–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø–∞–∂ –∏ –æ–Ω –Ω–µ —Ç–≤–æ–π) ===
    hard_ethnic = ['–≤–æ—Å—Ç–æ—á–Ω–∞—è –≤–Ω–µ—à–Ω–æ—Å—Ç—å', '—É–∑–±–µ–∫', '—Ç–∞–¥–∂–∏–∫', '–∫–∞–≤–∫–∞–∑—Å–∫–∞—è –≤–Ω–µ—à–Ω–æ—Å—Ç—å', '–Ω–µ–≥—Ä–æ–∏–¥', '–∞—Ñ—Ä–æ']
    if any(e in text for e in hard_ethnic):
        if not any(w in text for w in ['—Å–ª–∞–≤—è–Ω', '—Ä—É—Å—Å–∫', '–µ–≤—Ä–æ–ø–µ', '–º—É–∂—á–∏–Ω–∞', '–∞–∫—Ç—ë—Ä', '–∞–∫—Ç–µ—Ä']):
            return False

    # === –≠—Ç–∞–ø 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≥–æ–¥–Ω–æ–≥–æ –∫–∞—Å—Ç–∏–Ω–≥–∞ ===
    must_have_keywords = [
        '—Ä–æ–ª—å', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '–ø—Ä–æ–±–∞', '–∫–∞—Å—Ç–∏–Ω–≥', '—Å—ä—ë–º–∫', '—ç–ø–∏–∑–æ–¥', '—Ç–∏–ø–∞–∂', '—Å–∞–º–æ–ø—Ä–æ–±–∞',
        '–≤ –∫–∞–¥—Ä–µ', '–∞–∫—Ç—ë—Ä', '–∞–∫—Ç–µ—Ä', '–Ω–∞ —Ä–æ–ª—å', '–∏–≥—Ä–∞–µ—Ç', '—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', '–ø—Ä–æ–±—ã'
    ]
    if not any(k in text for k in must_have_keywords):
        return False

    # === –≠—Ç–∞–ø 7. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è: –µ—Å–ª–∏ –ù–ï –ü–µ—Ç–µ—Ä–±—É—Ä–≥, —Ç–æ –Ω—É–∂–µ–Ω –≤—ã—Å–æ–∫–∏–π –≥–æ–Ω–æ—Ä–∞—Ä ===
    is_spb = any(city in text for city in ['—Å–ø–±', '–ø–∏—Ç–µ—Ä', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥'])
    if not is_spb and pay_match:
        amount = int(pay_match.group(1))
        if amount < 50000:
            return False

    return True

# === –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ===
async def forward_message(event):
    try:
        await client.forward_messages(chat_id, event.message)
        print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {event.chat.title if event.chat else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞'}")

    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        msg = event.message
        text = msg.text or msg.caption

        if text:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if event.chat:
                username = getattr(event.chat, 'username', None)
                title = getattr(event.chat, 'title', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
                if username:
                    source = f"t.me/{username}"
                elif title:
                    source = f"–ö–∞–Ω–∞–ª: {title}"
                else:
                    source = "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            else:
                source = "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

            print(f"üìÑ –ö–æ–ø–∏—Ä—É—é —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é: {text[:50]}...")
            await client.send_message(chat_id, f"üìå –ö–∞—Å—Ç–∏–Ω–≥ –ø–æ–¥—Ö–æ–¥–∏—Ç ({source}):\n\n{text}")
        else:
            print("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∏ text, –Ω–∏ caption)")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@client.on(events.NewMessage(chats=channels_list))
async def handler(event):
    msg_text = event.message.message or ''
    if is_relevant_message(msg_text):
        await forward_message(event)
    else:
        print(f"[–ü—Ä–æ–ø—É—â–µ–Ω–æ] {event.chat.title if event.chat else '–ë–µ–∑ –∏–º–µ–Ω–∏'}")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ—Å—Å–∏–∏ ===
async def check_user_subscriptions():
    print("\nüîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ—Å—Å–∏–∏...")
    dialogs = await client.get_dialogs()
    channels_user_is_in = []
    for dialog in dialogs:
        if dialog.is_channel:
            username = getattr(dialog.entity, 'username', None)
            if username:
                channels_user_is_in.append(username)
    print(f"–ö–∞–Ω–∞–ª—ã –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {channels_user_is_in}\n")

    print("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–≤–æ–∏–º —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤:")
    for ch in channels_list:
        if ch in channels_user_is_in:
            print(f"‚úÖ {ch} ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å")
        else:
            print(f"‚ùå {ch} ‚Äî –ø–æ–¥–ø–∏—Å–∫–∏ –ù–ï–¢")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª–∞–º ===
async def check_channels():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª–∞–º (get_entity)...")
    for ch in channels_list:
        try:
            entity = await client.get_entity(ch)
            title = getattr(entity, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫: {ch} ‚Äî {title}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {ch}: {e}")

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ===
def run_flask():
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

# === –û—Å–Ω–æ–≤–Ω–∞—è async —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ===
async def main():
    await client.start(phone=phone)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await check_user_subscriptions()
    await check_channels()
    await client.run_until_disconnected()

if __name__ == '__main__':
    flask_thread = Thread(target=run_flask)
    flask_thread.start()
    asyncio.run(main())
