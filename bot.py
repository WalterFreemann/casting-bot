import os
import requests
from telethon import TelegramClient

# üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Backblaze B2
def authorize_b2():
    key_id = os.environ['B2_KEY_ID']
    app_key = os.environ['B2_APPLICATION_KEY']
    auth_url = "https://api.backblazeb2.com/b2api/v2/b2_authorize_account"
    response = requests.get(auth_url, auth=(key_id, app_key))
    if response.status_code != 200:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ B2: {response.status_code} - {response.text}")
    return response.json()

# üì¶ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ –∏–∑ B2
def download_b2_file(auth_data):
    api_url = auth_data['downloadUrl']
    auth_token = auth_data['authorizationToken']
    bucket = os.environ['B2_BUCKET_NAME']
    file_name = os.environ['B2_FILE_NAME']
    file_url = f"{api_url}/file/{bucket}/{file_name}"

    headers = {"Authorization": auth_token}
    response = requests.get(file_url, headers=headers)
    if response.status_code != 200:
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {response.status_code} - {response.text}")

    with open(file_name, "wb") as f:
        f.write(response.content)
    print(f"‚úÖ –°–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ.")

# üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
session_file = os.environ.get("B2_FILE_NAME", "session.session")
if not os.path.exists(session_file):
    print("–°–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ. –°–∫–∞—á–∏–≤–∞–µ–º...")
    auth_data = authorize_b2()
    download_b2_file(auth_data)

# üì± –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
api_id = int(os.environ['TG_API_ID'])
api_hash = os.environ['TG_API_HASH']
bot_token = os.environ['TG_BOT_TOKEN']

client = TelegramClient(session_file.replace(".session", ""), api_id, api_hash).start(bot_token=bot_token)

# –ü—Ä–æ—Å—Ç–æ–π handler –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    await event.respond("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
client.run_until_disconnected()
